buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

version = modVersion
group = modGroup
archivesBaseName = modBaseName

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven { url = 'https://files.minecraftforge.net/maven' }
    maven {
        name = "chickenbones"
        url = "https://chickenbones.net/maven" //or https://maven.covers1624.net/
    }
}

configurations {
    extraLibs
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.4-35.1.10'

    compile fg.deobf("codechicken:CodeChickenLib:1.16.4-3.5.0.401:universal")

    compile(project(':ElegantNetworkingCommon')) { transitive = false }
    extraLibs project(':ElegantNetworkingCommon')
    
    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8', project(':ElegantNetworkingAnnotationProcessor')
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
    if (!testBuild) {
        exclude('hohserg/elegant/networking/test/**')
        exclude('META-INF/services/**')
        exclude('tmp_generated/**')
    }
    manifest {
        attributes([
                "Specification-Title"     : "elegant_networking",
                "Specification-Vendor"    : "elegant_networking",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "elegant_networking",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    exclude('hohserg/elegant/networking/test/**')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    exclude('hohserg/elegant/networking/test/**')
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    required { project.hasProperty("signing.keyId") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            repository(url: releasesRepoUrl/*'file://localhost/' + new File(project.getProjectDir(),'repo').getAbsolutePath()*/) {
                if (project.hasProperty("ossrhUsername"))
                    authentication userName: "$ossrhUsername", password: "$ossrhPassword"
            }

            pom.artifactId = 'elegant-networking-1.16'
            pom.project {
                name 'ElegantNetworking MinecraftForge 1.16 library'
                packaging 'jar'
                description 'This is a runtime library of ElegantNetworking for MinecraftForge 1.16'
                url 'https://github.com/ElegantNetworking/ElegantNetworkingRoot'

                scm {
                    connection = 'scm:git:https://github.com/ElegantNetworking/ElegantNetworking_1.16.git'
                    developerConnection = 'scm:git:git@github.com:https://github.com/ElegantNetworking/ElegantNetworking_1.16.git'
                    url = 'https://github.com/ElegantNetworking/ElegantNetworking_1.16'
                }

                licenses {
                    license {
                        name = 'GNU Lesser General Public License v3.0'
                        url = 'https://raw.githubusercontent.com/ElegantNetworking/ElegantNetworking_1.16/master/LICENSE.md'
                    }
                }

                developers {
                    developer {
                        id = 'hohserg'
                        name = 'hohserg'
                        email = 'hohserg1@yandex.ru'
                    }
                }
            }
            pom.whenConfigured {
                p -> p.dependencies=[]
            }
        }
    }
}


/*
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}*/